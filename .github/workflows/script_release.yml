name: Script Versioning and Release

on:
  pull_request:
    paths:
      - 'Scripts/**/*.sh'
      - 'Scripts/**/*.zsh'
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Make version_check.sh executable
        run: chmod +x .github/scripts/version_check.sh

      - name: Run version check script if Scripts/ exists and is not empty
        run: |
          if [ -d Scripts ] && [ "$(ls -A Scripts)" ]; then
            echo "Running version_check.sh..."
            .github/scripts/version_check.sh
          else
            echo "Scripts directory is missing or empty. Skipping version check."
          fi

      - name: Commit changes if any (with logging)
        run: |
          if [ -d Scripts ] && [ "$(ls -A Scripts)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            echo "=== Git Status ==="
            git status
            echo "=== Git Diff ==="
            git diff --cached

            if git diff --quiet; then
              echo "No changes to commit."
            else
              git add Scripts/
              git commit -m "Auto-update script headers"
              git push
            fi
          else
            echo "Scripts directory is missing or empty. Nothing to commit."
          fi

  release:
    if: github.ref == 'refs/heads/main'
    needs: check-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Generate release notes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python .github/scripts/generate_release_notes.py
      - name: Extract version from scripts
        id: extract_version
        run: |
          VERSION=$(grep -h 'Version:' Scripts/* | sed -E 's/.*Version:[[:space:]]*//' | sort -V | tail -n 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Zip scripts
        run: |
          mkdir -p temp_zip
          cp Scripts/*.sh Scripts/*.zsh temp_zip/ 2>/dev/null || true
          cd temp_zip
          zip ../Scripts.zip *.sh *.zsh 2>/dev/null || true
          cd ..
          rm -rf temp_zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: |
            Scripts/*.sh
            Scripts/*.zsh
            Scripts.zip

      - name: Update README
        run: python .github/scripts/update_readme.py