name: Script release (nested + python)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'            # Push a tag like v1.0.0 to create a release
  pull_request:
    paths:
      - '**/*.sh'
      - '**/*.zsh'
      - '**/*.py'
      - 'scripts/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: script-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  versionize-and-notes:
    name: Versionize headers, generate notes, update README
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps (if any)
        run: |
          python -m pip install --upgrade pip
          # Add pinned deps here if your helper scripts need them
          # pip install -r scripts/requirements.txt

      - name: Generate release notes (auto-detect path)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          NOTES_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/generate_release_notes\.py$' || true)"
          if [ -z "${NOTES_SCRIPT}" ]; then
            echo "Could not find generate_release_notes.py under scripts/ or .github/scripts/. Creating stub notes."
            echo "# Release Notes" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "_(No release notes script found in this run.)_" >> RELEASE_NOTES.md
            exit 0
          fi

          if [ -n "${OPENAI_API_KEY:-}" ]; then
            echo "Running: python ${NOTES_SCRIPT}"
            python "${NOTES_SCRIPT}"
          else
            echo "OPENAI_API_KEY not set; skipping AI release notes."
            echo "# Release Notes" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "_(No AI-generated release notes for this run.)_" >> RELEASE_NOTES.md
          fi


      - name: Update README from release notes (auto-detect path)
        shell: bash
        run: |
            set -euo pipefail
            UPDATE_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/update_readme\.py$' || true)"
            if [ -z "${UPDATE_SCRIPT}" ]; then
              echo "Could not find update_readme.py under scripts/ or .github/scripts/. Skipping README update."
              exit 0
            fi
            echo "Running: python ${UPDATE_SCRIPT}"
            python "${UPDATE_SCRIPT}"


      - name: Make version script executable
        run: chmod +x scripts/version_check.sh

      - name: Apply version headers recursively (sh/zsh/py)
        shell: bash
        run: |
          set -euo pipefail
          VC_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/version_check\.sh$' || true)"
          if [ -z "${VC_SCRIPT}" ]; then
            echo "Could not find version_check.sh under scripts/ or .github/scripts/. Skipping versioning."
            exit 0
          fi
          chmod +x "${VC_SCRIPT}"
          echo "Running: ${VC_SCRIPT}"
          "${VC_SCRIPT}"


      - name: Build scripts bundle (recursive, ignore macOS cruft)
        run: |
          rm -f scripts_bundle.zip
          # Collect all tracked shell & python files recursively
          mapfile -d '' FILES < <(git ls-files -z '**/*.sh' '**/*.zsh' '**/*.py')
          if [ "${#FILES[@]}" -gt 0 ]; then
            # Use a temp staging dir to preserve paths in the zip
            STAGE=".bundle_stage"
            rm -rf "$STAGE"
            mkdir -p "$STAGE"
            for f in "${FILES[@]}"; do
              mkdir -p "$STAGE/$(dirname "$f")"
              cp "$f" "$STAGE/$f"
            done
            (cd "$STAGE" && zip -r ../scripts_bundle.zip . -x '*/.DS_Store')
            rm -rf "$STAGE"
          else
            # Ensure a zip exists even if no files matched
            zip -r scripts_bundle.zip . -x '*/.DS_Store' >/dev/null
          fi
          ls -lh scripts_bundle.zip

      - name: Commit & push changes (only on branch pushes)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        run: |
          if ! git diff --quiet; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "CI: versionize scripts (nested+py), update README & notes"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Upload bundle as workflow artifact (for debugging/PRs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scripts_bundle
          path: scripts_bundle.zip

  create-release:
    name: Create GitHub Release (on tag)
    runs-on: ubuntu-latest
    needs: versionize-and-notes
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure bundle exists
        run: |
          if [ ! -f scripts_bundle.zip ]; then
            # Rebuild if this job runs independently on the tag
            mapfile -d '' FILES < <(git ls-files -z '**/*.sh' '**/*.zsh' '**/*.py')
            rm -f scripts_bundle.zip
            if [ "${#FILES[@]}" -gt 0 ]; then
              STAGE=".bundle_stage"
              rm -rf "$STAGE"
              mkdir -p "$STAGE"
              for f in "${FILES[@]}"; do
                mkdir -p "$STAGE/$(dirname "$f")"
                cp "$f" "$STAGE/$f"
              done
              (cd "$STAGE" && zip -r ../scripts_bundle.zip . -x '*/.DS_Store')
              rm -rf "$STAGE"
            else
              zip -r scripts_bundle.zip . -x '*/.DS_Store' >/dev/null
            fi
          fi

      - name: Ensure release notes exist
        run: |
          if [ ! -f RELEASE_NOTES.md ]; then
            echo "# Release Notes" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "_(Release notes not generated in this job.)_" >> RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          files: |
            scripts_bundle.zip
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}