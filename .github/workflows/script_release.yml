name: Script release (nested + python)

on:
  push:
    branches:
      - main
    tags:
      - "v*"     # create a release when pushing tags like v1.0.0
  pull_request:
    paths:
      - "**/*.sh"
      - "**/*.zsh"
      - "**/*.py"
      - "scripts/**"
      - ".github/scripts/**"
      - ".github/workflows/**"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: script-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  versionize-and-notes:
    name: Versionize headers, generate notes, update README
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install OpenAI SDK (legacy)
        run: pip install openai==0.28

      - name: Generate release notes (auto-detect path)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          NOTES_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/generate_release_notes\.py$' || true)"
          if [ -z "${NOTES_SCRIPT}" ]; then
            echo "Could not find generate_release_notes.py under scripts/ or .github/scripts/. Creating stub notes."
            {
              echo "# Release Notes"
              echo
              echo "_(No release notes script found in this run.)_"
            } > RELEASE_NOTES.md
            exit 0
          fi

          if [ -n "${OPENAI_API_KEY:-}" ]; then
            echo "Running: python ${NOTES_SCRIPT}"
            python "${NOTES_SCRIPT}"
          else
            echo "OPENAI_API_KEY not set; skipping AI release notes."
            {
              echo "# Release Notes"
              echo
              echo "_(No AI-generated release notes for this run.)_"
            } > RELEASE_NOTES.md
          fi

      - name: Update README from release notes (auto-detect path)
        shell: bash
        run: |
          set -euo pipefail
          UPDATE_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/update_readme\.py$' || true)"
          if [ -z "${UPDATE_SCRIPT}" ]; then
            echo "Could not find update_readme.py under scripts/ or .github/scripts/. Skipping README update."
            exit 0
          fi
          echo "Running: python ${UPDATE_SCRIPT}"
          python "${UPDATE_SCRIPT}"

      - name: Apply version headers recursively (sh/zsh/py)
        shell: bash
        run: |
          set -euo pipefail
          VC_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/version_check\.sh$' || true)"
          if [ -z "${VC_SCRIPT}" ]; then
            echo "version_check.sh not found under scripts/ or .github/scripts/."
            echo "Creating a fallback at .github/scripts/version_check.sh ..."
            mkdir -p .github/scripts
            cat > .github/scripts/version_check.sh <<'EOF'
#!/bin/bash
set -euo pipefail
AUTHOR="Jon Brown"
TODAY="$(date +%Y-%m-%d)"

sedi(){ if sed --version >/dev/null 2>&1; then sed -i "$@"; else sed -i '' "$@"; fi; }
bump(){ v="${1:-0.1}"; maj="${v%%.*}"; min="${v#*.}"; [[ "$maj" =~ ^[0-9]+$ ]]||maj=0; [[ "$min" =~ ^[0-9]+$ ]]||min=1; if ((min>=10)); then maj=$((maj+1)); min=0; else min=$((min+1)); fi; echo "$maj.$min"; }

hdr_sh(){ f="$1"; cur="$(awk -F': ' '/^# Version:/{print $2; exit}' "$f")"
  if [ -z "$cur" ]; then new="0.1"
    if head -n1 "$f" | grep -q '^#!'; then { head -n1 "$f"; printf '%s\n' "###############################################" "# Author : $AUTHOR" "# Date   : $TODAY" "# Version: $new" "###############################################"; tail -n +2 "$f"; } > "$f.tmp" && mv "$f.tmp" "$f"
    else { printf '%s\n' "###############################################" "# Author : $AUTHOR" "# Date   : $TODAY" "# Version: $new" "###############################################"; cat "$f"; } > "$f.tmp" && mv "$f.tmp" "$f"; fi
  else new="$(bump "$cur")"; sedi "s/^# Version: .*/# Version: $new/" "$f"; sedi "s/^# Date   : .*/# Date   : $TODAY/" "$f"; fi
}

hdr_py(){ f="$1"; cur="$(awk -F': ' '/^# Version:/{print $2; exit}' "$f")"
  grep -qE '^__version__\s*=' "$f" || { if head -n1 "$f" | grep -q '^#!'; then { head -n1 "$f"; echo '__version__ = "0.1"'; tail -n +2 "$f"; } > "$f.tmp" && mv "$f.tmp" "$f"; else { echo '__version__ = "0.1"'; cat "$f"; } > "$f.tmp" && mv "$f.tmp" "$f"; fi; }
  if [ -z "$cur" ]; then new="0.1"
    if head -n1 "$f" | grep -q '^#!'; then { head -n1 "$f"; printf '%s\n' "###############################################" "# Author : $AUTHOR" "# Date   : $TODAY" "# Version: $new" "###############################################"; tail -n +2 "$f"; } > "$f.tmp" && mv "$f.tmp" "$f"
    else { printf '%s\n' "###############################################" "# Author : $AUTHOR" "# Date   : $TODAY" "# Version: $new" "###############################################"; cat "$f"; } > "$f.tmp" && mv "$f.tmp" "$f"; fi
  else new="$(bump "$cur")"; sedi "s/^# Version: .*/# Version: $new/" "$f"; sedi "s/^# Date   : .*/# Date   : $TODAY/" "$f"; fi
  hv="$(awk -F': ' '/^# Version:/{print $2; exit}' "$f")"; [ -n "$hv" ] && sedi "s/^(__version__\s*=\s*).*/\1\"$hv\"/" "$f"
}

export LC_ALL=C
mapfile -d '' FILES < <(git ls-files -z '**/*.sh' '**/*.zsh' '**/*.py')
for f in "${FILES[@]}"; do case "$f" in *.sh|*.zsh) hdr_sh "$f" ;; *.py) hdr_py "$f" ;; esac; done
EOF
            VC_SCRIPT=".github/scripts/version_check.sh"
            git add .github/scripts/version_check.sh || true
          fi

          chmod +x "${VC_SCRIPT}"
          echo "Running: ${VC_SCRIPT}"
          "${VC_SCRIPT}"

      - name: Build scripts bundle (recursive, ignore macOS cruft)
        shell: bash
        run: |
          set -euo pipefail
          rm -f scripts_bundle.zip
          mapfile -d '' FILES < <(git ls-files -z '**/*.sh' '**/*.zsh' '**/*.py')
          if [ "${#FILES[@]}" -gt 0 ]; then
            STAGE=".bundle_stage"
            rm -rf "$STAGE"
            mkdir -p "$STAGE"
            for f in "${FILES[@]}"; do
              mkdir -p "$STAGE/$(dirname "$f")"
              cp "$f" "$STAGE/$f"
            done
            (cd "$STAGE" && zip -r ../scripts_bundle.zip . -x '*/.DS_Store')
            rm -rf "$STAGE"
          else
            zip -r scripts_bundle.zip . -x '*/.DS_Store' >/dev/null
          fi
          ls -lh scripts_bundle.zip

      - name: Commit & push changes (only on branch pushes)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "CI: versionize scripts (nested+py), update README & notes"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Upload bundle as workflow artifact (for PRs / debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scripts_bundle
          path: scripts_bundle.zip

  create-release:
    name: Create GitHub Release (on tag)
    runs-on: ubuntu-latest
    needs: versionize-and-notes
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure bundle exists
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f scripts_bundle.zip ]; then
            mapfile -d '' FILES < <(git ls-files -z '**/*.sh' '**/*.zsh' '**/*.py')
            rm -f scripts_bundle.zip
            if [ "${#FILES[@]}" -gt 0 ]; then
              STAGE=".bundle_stage"
              rm -rf "$STAGE"
              mkdir -p "$STAGE"
              for f in "${FILES[@]}"; do
                mkdir -p "$STAGE/$(dirname "$f")"
                cp "$f" "$STAGE/$f"
              done
              (cd "$STAGE" && zip -r ../scripts_bundle.zip . -x '*/.DS_Store')
              rm -rf "$STAGE"
            else
              zip -r scripts_bundle.zip . -x '*/.DS_Store' >/dev/null
            fi
          fi

      - name: Ensure release notes exist
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f RELEASE_NOTES.md ]; then
            {
              echo "# Release Notes"
              echo
              echo "_(Release notes not generated in this job.)_"
            } > RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          files: |
            scripts_bundle.zip
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}