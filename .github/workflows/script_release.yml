name: Script release (auto on change, nested + python)

on:
  push:
    branches: [ main ]
  pull_request:
    paths:
      - "**/*.sh"
      - "**/*.zsh"
      - "**/*.py"
      - "scripts/**"
      - ".github/scripts/**"
      - ".github/workflows/**"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: script-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release-on-change:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install OpenAI SDK (legacy for generate_release_notes.py)
        run: pip install openai==0.28

      # ----- Generate release notes (optional; stubs if not present / no key) -----
      - name: Generate release notes (auto-detect path)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          NOTES_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/generate_release_notes\.py$' || true)"
          if [ -z "${NOTES_SCRIPT}" ]; then
            echo "No generate_release_notes.py found. Creating stub RELEASE_NOTES.md."
            {
              echo "# Release Notes"
              echo
              echo "_(No release notes script found in this run.)_"
            } > RELEASE_NOTES.md
            exit 0
          fi

          if [ -n "${OPENAI_API_KEY:-}" ]; then
            echo "Running: python ${NOTES_SCRIPT}"
            python "${NOTES_SCRIPT}"
          else
            echo "OPENAI_API_KEY not set; creating stub RELEASE_NOTES.md."
            {
              echo "# Release Notes"
              echo
              echo "_(No AI-generated release notes for this run.)_"
            } > RELEASE_NOTES.md
          fi

      - name: Update README from release notes (auto-detect path)
        shell: bash
        run: |
          set -euo pipefail
          UPDATE_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/update_readme\.py$' || true)"
          if [ -z "${UPDATE_SCRIPT}" ]; then
            echo "No update_readme.py found. Skipping README update."
            exit 0
          fi
          echo "Running: python ${UPDATE_SCRIPT}"
          python "${UPDATE_SCRIPT}"

      # ----- Version headers across nested folders (sh/zsh/py) -----
      - name: Apply version headers recursively (sh/zsh/py)
        shell: bash
        run: |
          set -euo pipefail
          VC_SCRIPT="$(git ls-files | grep -E '(^|/)(scripts|\.github/scripts)/version_check\.sh$' || true)"
          if [ -z "${VC_SCRIPT}" ]; then
            echo "No version_check.sh found. Skipping versioning."
            exit 0
          fi
          chmod +x "${VC_SCRIPT}"
          echo "Running: ${VC_SCRIPT}"
          "${VC_SCRIPT}"

      # ----- Build bundle of changed scripts (keeps folder structure) -----
      - name: Build scripts bundle (recursive, ignore macOS cruft)
        id: bundle
        shell: bash
        run: |
          set -euo pipefail
          rm -f scripts_bundle.zip
          mapfile -d '' FILES < <(git ls-files -z '**/*.sh' '**/*.zsh' '**/*.py')
          if [ "${#FILES[@]}" -gt 0 ]; then
            STAGE=".bundle_stage"
            rm -rf "$STAGE"
            mkdir -p "$STAGE"
            for f in "${FILES[@]}"; do
              mkdir -p "$STAGE/$(dirname "$f")"
              cp "$f" "$STAGE/$f"
            done
            (cd "$STAGE" && zip -r ../scripts_bundle.zip . -x '*/.DS_Store')
            rm -rf "$STAGE"
          else
            zip -r scripts_bundle.zip . -x '*/.DS_Store' >/dev/null
          fi
          ls -lh scripts_bundle.zip

      # ----- Commit version/README changes back to main if needed -----
      - name: Commit & push changes (only on branch pushes)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "CI: versionize scripts (nested+py), update README & notes"
            git push
          else
            echo "No changes to commit."
          fi

      # ----- Detect if scripts changed in the latest commit on this branch -----
      - name: Detect script changes in last commit
        id: changed
        shell: bash
        run: |
          set -euo pipefail
          # Compare last commit against its parent on this runner (post-commit state)
          BASE_COMMIT="$(git rev-parse HEAD^ || true)"
          if [ -z "$BASE_COMMIT" ]; then
            # First commit in repo or shallow clone; fallback to show files from HEAD
            CHANGED="$(git diff --name-only | tr '\n' '\0' | xargs -0 -I{} echo {})"
          else
            CHANGED="$(git diff --name-only "$BASE_COMMIT"..HEAD | tr '\n' '\0' | xargs -0 -I{} echo {})"
          fi
          echo "Changed files:"
          echo "$CHANGED"

          if echo "$CHANGED" | grep -E '\.(sh|zsh|py)$' >/dev/null 2>&1; then
            echo "scripts_changed=true" >> $GITHUB_OUTPUT
          else
            echo "scripts_changed=false" >> $GITHUB_OUTPUT
          fi

      # ----- Auto-create a release when scripts changed on main -----
      - name: Create GitHub Release (auto on change)
        if: steps.changed.outputs.scripts_changed == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.tagvars.outputs.tag_part }}
          name: v${{ steps.tagvars.outputs.tag_part }}
          body_path: RELEASE_NOTES.md
          files: |
            scripts_bundle.zip
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # note: tag will be created automatically at the current HEAD

      # compute tag vars (run before the release step above via needs-like ordering)
      - name: Compute tag variables
        id: tagvars
        if: steps.changed.outputs.scripts_changed == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        shell: bash
        run: |
          set -euo pipefail
          # vYYYY.MM.DD.<run_number>
          TAG_PART="$(date -u +%Y.%m.%d).${GITHUB_RUN_NUMBER}"
          echo "tag_part=${TAG_PART}" >> $GITHUB_OUTPUT

      # Always upload artifact for PRs/debugging
      - name: Upload bundle as workflow artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scripts_bundle
          path: scripts_bundle.zip